[
["index.html", "H2O in R 1 Introduction 1.1 Wondering what H2O is? 1.2 Other resources", " H2O in R Tsepo Ramaisa 2019-09-10 1 Introduction These are short notes of getting up and running quickly with H2O in an R environment. The notes cover installation of H2O from R and a simple use case aimed at showcasing the use of H2O from R. 1.1 Wondering what H2O is? H2O is an open source platform that aims to allow easy scaling of machine learning algorithms and predictive analytics to big data and provides easy productionalization of those models in an enterprise environment. All this brought to you in the comfort of your preferred data analysis language. For a detailed explanation of what H2O is and what it aims to do, refer to this part of the documentation. 1.2 Other resources For a broad, probably exhaustive coverage of functionalities offered by H2O, one can have a look at H2O’s documentation. The folks at H2O really did a magnificent job The book Practical Machine Learning with H2O by Darren Cook is a good hands-on guide of using H2O H2O’s Amy Wang gives a hands on introductory training in this video titled H2O - Hands on with R, Python and Flow Feel free to email me with questions,comments or suggestions. "],
["getting-started-with-h2o-in-r.html", "2 Getting started with H2O in R 2.1 Summary of how it works 2.2 Installation", " 2 Getting started with H2O in R 2.1 Summary of how it works When using H2O from R, one launches an H2O instance from R. R then communicates with the instance via a REST API. So in essence all data manipulations and calculations are not done in R but are handled by H2O, one just uses familiar R syntax to send instructions to H2O via the API. Data sets are not directly transmitted through the REST API. Instead, commands (for example, importing a data set) are sent either through the browser or the REST API to perform the specified task. The data set will then be assigned an identifier (the .hex file type in H2O) which is relayed back to R. H2O does how ever provide the functionality to convert h2oFrames to R dataframes for manipulation in R. 2.2 Installation The installation of h2o via R seems the most straightforward approach. This approach, for the most part, is uniform on systems running Linux, Windows and OSX. For other installation methods or installation from other platforms like python check out the h2o documentation. 2.2.1 prep the environment Before the actual installation of H2O there are some dependencies that need to be taken care of. Below we look at the most common ones: H2O runs in a JVM so the first thing to install is java. Next, especially for Linux distributions, we need to install some dependencies outside of R. On Ubuntu run apt-get install libcurl4-openssl-dev in the terminal. This is needed by the RCurl package in R. For a clean install, run the following lines in a R console to remove any previously installed H2O packages # detach h2o package if loaded if (&quot;package:h2o&quot; %in% search()) { detach(&quot;package:h2o&quot;, unload=TRUE) } # remove h2o package if installed if (&quot;h2o&quot; %in% rownames(installed.packages())) { remove.packages(&quot;h2o&quot;) } If installing from source (see install and test below) then dependencies for the h2o package may need to be manually installed in R. The following code will achieve that pkgs &lt;- c(&quot;RCurl&quot;,&quot;jsonlite&quot;,&quot;utils&quot;,&quot;tools&quot;,&quot;graphics&quot;,&quot;stats&quot;,&quot;statmod&quot;,&quot;methods&quot;) for (pkg in pkgs) { if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) } } 2.2.2 install and test With the environment prepared we can proceed with the installation. The installation of the package will also trigger the download of the h2o.jar file from H2O. The stable version from cran may be a version behind the one from source (for the notes we use the version from source). # installing the latest stable release from source install.packages(&quot;h2o&quot;, type=&quot;source&quot;, repos=(c(&quot;http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R&quot;))) # installing the latest stable release from cran install.packages(&quot;h2o&quot;) Next we test if everything went well by running a demo example. By default the initialisation will also run an instance of h2o Flow with port 54321 exposed on localhost. The default behavior can be changed via parameters of h2o.init() ( have a look at ?h2o.init()). Launching h2o from R ties it to the R session that launched it so termination of the session also terminates the h2o instance. # load the library into environment library(h2o) # initialise an instance of h2o with the maximum number of cores available localH2O &lt;- h2o.init(nthreads = -1) # Starts H2O using localhost IP, port 54321, all CPUs,and 4g of memory # h2o.init(ip = &#39;localhost&#39;, port = 54321, nthreads= -1,max_mem_size = &#39;4g&#39;) # run a demo to test if all went well demo(h2o.kmeans) "],
["simple-example.html", "3 Simple Example 3.1 Start an instance of H2O 3.2 Data preparation 3.3 Data exploration 3.4 Model building 3.5 Some last thoughts", " 3 Simple Example This is a small example to demonstrate how one can create a ML workflow in h2o via R. We will use the breast cancer data set from the mlbench package. 3.1 Start an instance of H2O Start H2O using localhost IP, port 54321, all CPUs,and 6g of memory. The recommendation for max_mem_size is 4X the size of the data set. The 6gig is clearly over kill given the size of the data used in this example,but ah! library(h2o) # Starts H2O using localhost IP, port 54321, all CPUs,and 6g of memory h2o.init(ip = &#39;localhost&#39;, port = 54321, nthreads= -1,max_mem_size = &#39;6g&#39;) 3.2 Data preparation 3.2.1 read in data 3.2.1.1 from R dataframe to h2oFrame The function as.h2o() converts an R dataframe to an H2OFrame in the h2o instance. Some features have their type set to ordered factors and as.h2o() seems to have a problem with parsing ordered factors. Before the conversion we convert to unordered factor variables. library(dplyr) library(mlbench) library(purrr) # load the data set into environment data(BreastCancer) # convert data frame to an H2OFrame BreastCancer_h2o &lt;- map(BreastCancer,factor,ordered = F) %&gt;% as.data.frame() %&gt;% # map returns list, coerce that to a df as.h2o() # convert to h2oFrame # can call head to confirm data was transfared correctly h2o.head(BreastCancer_h2o) 3.2.1.2 reading data directly into h2o In most cases data will not be in R but from some other data source like a csv file or a Hadoop cluster. In fact chances are the main reason one even considered h2o is to scale R to working with large scale data sets, so first importing data into R then push it to an h2o instance wouldn’t be particularly helpful. The code below reads in a csv file stored locally on the host machine, further info in loading data from other sources can be found in the documentation here data_path &lt;- &quot;./data/BreastCancer.csv&quot; BreastCancer_h2o &lt;- h2o.importFile(path = data_path, destination_frame = &quot;BreastCancer_h2o&quot;, header = T, col.types = rep(&quot;Enum&quot;,11)) # Enum is a factor Once loaded the data can also be viewed in h2o flow at localhost:54321 using the getFlow command 3.2.2 split data According to the documentation the h2o.splitFrame() function doesn’t perform an exact split as specified by the proportions but an approximate split. For the most part this isn’t an issue when dealing with large amounts of data. When dealing with small data sets and data sets with imbalanced data though, it may become something worth paying attention to. BreastCancer_h2o_split_vec &lt;- h2o.splitFrame(BreastCancer_h2o, ratios = 0.80, seed = 820) train_h20 &lt;- BreastCancer_h2o_split_vec[[1]] test_h2o &lt;- BreastCancer_h2o_split_vec[[2]] 3.3 Data exploration Here we showcase some functions h2o offers as far as data exploration and manipulation is concerned. For the most part h2o feels like performing surgery with a butter knife, especially to someone used to dealing with relatively small data sets, just keep in mind that it’s mainly designed for efficiency with huge data sets, and that it does beautifully. For data sets small enough to be read into R, it may be less frustrating to pull the h2oFrame into R as a data frame using as.data.frame(h2oFrame_object), wrangle and explore the data using the mighty dplyr package then push the data back into h2o for training. 3.3.1 get dimensions h2o.dim(train_h20) [1] 561 11 3.3.2 glimpse Some R functions (e.g head,dim) seem to work on h2oFrames as though the operations are done in R, however, it may be wise to keep prepending the functions with the standard h2o. prefix even in such cases to make operations not done in R explicitly clear. h2o.head(train_h20,n=5) # controling number of observations to pull Id Cl.thickness Cell.size Cell.shape Marg.adhesion Epith.c.size 1 1000025 5 1 1 1 2 2 1002945 5 4 4 5 7 3 1015425 3 1 1 1 2 4 1016277 6 8 8 1 3 5 1017122 8 10 10 8 7 Bare.nuclei Bl.cromatin Normal.nucleoli Mitoses Class 1 1 3 1 1 benign 2 10 3 2 1 benign 3 2 3 1 1 benign 4 4 3 7 1 benign 5 10 9 7 1 malignant 3.3.3 get summary statistics h2o.describe(train_h20) Label Type Missing Zeros PosInf NegInf Min Max Mean 1 Id enum 0 1 0 0 0 644 NA 2 Cl.thickness enum 0 119 0 0 0 9 NA 3 Cell.size enum 0 311 0 0 0 9 NA 4 Cell.shape enum 0 284 0 0 0 9 NA 5 Marg.adhesion enum 0 331 0 0 0 9 NA 6 Epith.c.size enum 0 38 0 0 0 9 NA 7 Bare.nuclei enum 13 328 0 0 0 9 NA 8 Bl.cromatin enum 0 115 0 0 0 9 NA 9 Normal.nucleoli enum 0 354 0 0 0 9 NA 10 Mitoses enum 0 463 0 0 0 8 NA 11 Class enum 0 370 0 0 0 1 0.3404635 Sigma Cardinality 1 NA 645 2 NA 10 3 NA 10 4 NA 10 5 NA 10 6 NA 10 7 NA 10 8 NA 10 9 NA 10 10 NA 9 11 0.474288 2 h2o.summary(train_h20) Id Cl.thickness Cell.size Cell.shape Marg.adhesion Epith.c.size 1182404:4 1 :119 1 :311 1 :284 1 :331 2:314 1276091:4 5 :104 10: 53 2 : 49 3 : 46 3: 54 1198641:3 3 : 86 3 : 41 3 : 47 10: 45 4: 41 1061990:2 4 : 64 2 : 36 10: 45 2 : 45 1: 38 1105524:2 10: 54 4 : 33 4 : 34 4 : 23 6: 31 1114570:2 2 : 41 6 : 25 6 : 25 8 : 23 5: 29 Bare.nuclei Bl.cromatin Normal.nucleoli Mitoses Class 1 :328 2:142 1 :354 1 :463 benign :370 10:103 3:138 10: 49 2 : 29 malignant:191 5 : 25 1:115 3 : 36 3 : 25 2 : 22 7: 57 2 : 29 10: 12 3 : 22 4: 31 8 : 19 4 : 9 8 : 18 5: 23 6 : 18 7 : 9 NA: 13 3.3.4 create summary table 3.3.4.1 one variable We create a simple frequency bar plot showing the frequencies of each of the Class variable levels. We create a table of all the counts in h2o then pull it into r as a data frame for plotting. This seemed like a nice opportunity to demonstrate the conversion of an h2oFrame into an R dataframe. library(ggplot2) library(dplyr) h2o.table(train_h20[,&quot;Class&quot;]) %&gt;% # create table in h20 as.data.frame() %&gt;% # convert h2oFrame to dataframe and feed to ggplot ggplot(aes(x=Class,y=Count))+ geom_bar(stat=&quot;identity&quot;, fill=&quot;steelblue&quot;)+ labs(title=&#39;Number of clinic cases recorded by cancer class&#39;, x=&#39;cancer class&#39;, y=&#39;number of clinic cases&#39;)+ theme(plot.title = element_text(hjust = 0.5)) 3.3.4.2 two variables This generalises to n variables level_order &lt;- c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;) h2o.table(train_h20[,c(&quot;Class&quot;,&quot;Cell.size&quot;)]) %&gt;% # create table grouping by Class &amp; Cell.size as.data.frame() %&gt;% # convert h2oFrame to dataframe mutate(Cell.size=ordered(Cell.size,levels=level_order)) %&gt;% # convert Cell.size to ordered factor ggplot(aes(x=Cell.size,y=Counts,fill = Class))+ geom_bar(stat=&quot;identity&quot;,position = &quot;dodge&quot;)+ labs(title=&#39;Number of clinic cases recorded by cell size&#39;, x=&#39;cancer cell size&#39;, y=&#39;number of clinic cases&#39;)+ theme(plot.title = element_text(hjust = 0.5))+ scale_fill_manual(guide= FALSE, values = c(benign=&quot;steelblue&quot;, malignant=&quot;blue&quot;) ) 3.3.5 missing values The h2o.describe() function revealed that the Bare.nuclei variable has 13 missing values we impute with the mode h2o.impute(data=train_h20, column = &quot;Bare.nuclei&quot;, method = &quot;mode&quot;) 3.4 Model building A number of algorithms have been implemented in h2o. A full list can be found in the documentation here 3.4.1 Random forest model 3.4.1.1 train h2o_rf &lt;- h2o.randomForest(y = &quot;Class&quot;, # specify response variable training_frame = train_h20, validation_frame = test_h2o, ntrees = 500, nfolds = 10, # specify k in k-fold cv seed = 3328) 3.4.1.2 check performance metrics h2o Flow provides a really sweet graphical representation of all training metrics, it is definitely worth looking at. the flow also allows monitoring of metrics while training through performance graphs. Models can be accessed by running the command getModels in h20 flow. Below we explore how the performance can be viewed from R h2o.performance(h2o_rf) H2OBinomialMetrics: drf ** Reported on training data. ** ** Metrics reported on Out-Of-Bag training samples ** MSE: 0.01727592 RMSE: 0.1314379 LogLoss: 0.06625494 Mean Per-Class Error: 0.01748267 AUC: 0.9985001 pr_auc: 0.9919338 Gini: 0.9970001 R^2: 0.9230636 Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold: benign malignant Error Rate benign 359 11 0.029730 =11/370 malignant 1 190 0.005236 =1/191 Totals 360 201 0.021390 =12/561 Maximum Metrics: Maximum metrics at their respective thresholds metric threshold value idx 1 max f1 0.415569 0.969388 187 2 max f2 0.415569 0.984456 187 3 max f0point5 0.691324 0.986770 165 4 max accuracy 0.691324 0.978610 165 5 max precision 1.000000 1.000000 0 6 max recall 0.246980 1.000000 193 7 max specificity 1.000000 1.000000 0 8 max absolute_mcc 0.415569 0.953699 187 9 max min_per_class_accuracy 0.558049 0.975676 182 10 max mean_per_class_accuracy 0.415569 0.982517 187 Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)` One can’t help but marvel at the wealth of information provided by the h2o model object, it is perhaps even more exciting that getting the kind of performance we got from our first model with practically no work done on the data. a thing of beauty indeed! plot(h2o_rf) 3.4.2 Extreme gradient boosted model 3.4.2.1 train h2o_xgb &lt;- h2o.xgboost(y = &quot;Class&quot;, # specify response variable training_frame = train_h20, validation_frame = test_h2o, ntrees = 500, nfolds = 10, # specify k in k-fold cv seed = 3328) 3.4.2.2 check performance metrics h2o.performance(h2o_rf) H2OBinomialMetrics: drf ** Reported on training data. ** ** Metrics reported on Out-Of-Bag training samples ** MSE: 0.01727592 RMSE: 0.1314379 LogLoss: 0.06625494 Mean Per-Class Error: 0.01748267 AUC: 0.9985001 pr_auc: 0.9919338 Gini: 0.9970001 R^2: 0.9230636 Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold: benign malignant Error Rate benign 359 11 0.029730 =11/370 malignant 1 190 0.005236 =1/191 Totals 360 201 0.021390 =12/561 Maximum Metrics: Maximum metrics at their respective thresholds metric threshold value idx 1 max f1 0.415569 0.969388 187 2 max f2 0.415569 0.984456 187 3 max f0point5 0.691324 0.986770 165 4 max accuracy 0.691324 0.978610 165 5 max precision 1.000000 1.000000 0 6 max recall 0.246980 1.000000 193 7 max specificity 1.000000 1.000000 0 8 max absolute_mcc 0.415569 0.953699 187 9 max min_per_class_accuracy 0.558049 0.975676 182 10 max mean_per_class_accuracy 0.415569 0.982517 187 Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)` plot(h2o_rf) 3.5 Some last thoughts H2o is indeed an awesome tool with a moderate learning curve relative to something like sparklyr (provides an interface for Apache Spark in R). Though powerful, h2o should probably be thought of as supplementing the language it is used in and not as a substitute. If you are interested in learning more about H2O the documentation is probably the next best alternative to look at. "]
]
